* Motivation

I really liked how the videos at [[http://cestlaz.github.io/stories/emacs/][cestlaz]] were short and focused on the practical use of the packages that were being shared.
This file is meant to share in that spirit, and capture specific value I get from certain packages.

It is worth noting that in any buffer using these modes, you can use `C-h m` to see the keybindings.
So if you find any of the packages here useful, you can explore other useful features that aren't covered.

* avy

avy allows navigation across all visible buffers in the window using a character based decision tree.

| Command name    | Command keys | Description                                                                                  |
|-----------------+--------------+----------------------------------------------------------------------------------------------|
| ayv-goto-word-1 | C-q          | Type a single character and the window is given multi-key shortcuts to nav to any occurence. |

This is really useful for jumping to a particular place in any of the visible buffers,
so when you have a lot of related code open together, you can easily jump to exact locations.

* cider

cider allows integration with clojure/clojurescript projects.

| Command name      | Command keys | Description                                                 |
|-------------------+--------------+-------------------------------------------------------------|
| cider-jack-in     | C-c M-j      |                                                             |
|                   | C-u C-M-x    | Cider Debug, this will 'instrument the top-level-expression |
|                   |              | Optionally, insert #break in code to create breakpoints     |
|                   |              | Use C-c C-e or the repl to evaluate                         |
|                   |              | n: next c: continue i: step-in o: step-out q: quit          |
|                   |              | Use C-M-x to stop debugging the marked expression           |
| cider-load-buffer | C-c C-k      | Load the current buffer to make it's definitions available  |
| cider-find-var    | M-.          | Attempt to locate symbol under point                        |
| cider-pop-back    | M-,          | Go back to where previous M-. was called from               |
| cider-quit        | C-c C-q      | Quit cider, stop nrepl                                      |

* command-log-mode

command-log-mode is useful for pairing or showing off what you're doing in emacs in a way that is friendly for others to watch.

| Command name                  | Command keys | Description                                           |
|-------------------------------+--------------+-------------------------------------------------------|
| clm/toggle-command-log-buffer | C-c o        | Toggles the command-log-buffer to show typed commands |
|                               |              |                                                       |

The toggle opens up a menu on the right hand side of the screen, which captures each command you perform as a list.
This is superior to the keyboard capturing programs in that the list remains, and automatically scrolls, so you don't have to catch fleeting glimpses.

* company

company - complete anything
Originally I had used the auto-complete package, but as I made progress configuring cider for clojure development, the docs mentioned that company was the prefered auto-complete.

| Command name            | Command keys | Description                                                                                       |
|-------------------------+--------------+---------------------------------------------------------------------------------------------------|
| company-show-doc-buffer | C-h          | Shows documentation for the currently selected item in the autocomplete tooltip                   |
| company-complete-number | M-<number>   | When `(company-show-numbers t), 1 - 0 show up next to options, and M-<number> selects one of them |

I also used define-key with company-active-map to give me ivy-like bindings (C-n, C-p, C-j) to move through the menu options.
Also neat to note that when working with emacs-lisp, documentation shows up in the bottom margin.
* expand-region

Expand region allows you take a starting selection, something even as simple as where the point currently is, and keep zooming out to select a larger and larger region.

| Command name     | Command keys | Description                                |
|------------------+--------------+--------------------------------------------|
| er/expand-region | C-=          | Increase selected region by semantic units |

The main value I get from this package is workflows for refactoring clojure code. I can use extend-region to expand until have an entire nested expression selected, and then a simple C-w will yank that form out of the current context.
I can then easily move it into a new location.

* swiper

swiper is a really neat package, centered around performing searches.
It uses a search result buffer called the `minibuffer`, which docks at the bottom of the emacs window.

The following commands are used to make searches easier to deal with.

| Command name      | Command keys | Description                                                                  |
|-------------------+--------------+------------------------------------------------------------------------------|
| counsel-M-x       | M-x          | Brings up a minibuffer of known commands, and also their key bindings        |
| swiper            | C-s          | Brings up a minibuffer that allows you to search the current file            |
| counsel-git       | C-c g        | Brings up a minibuffer that allows you to search a git repo by file name     |
| counsel-git-grep  | C-c j        | Brings up a minibuffer that allows you to search a git repo by file contents |
| ivy-switch-buffer | C-x b        | Brings up a minibuffer that allows you to search the list of buffers by name |
| ivy-resume        | <f6>         | Brings up the most recent minibuffer, retaining the context when possible    |

The real power comes from using the minibuffer to consistently navigate results in each of the different search contexts.

| Command name           | Command keys | Description                                                            |
|------------------------+--------------+------------------------------------------------------------------------|
| ivy-next-line          | C-n          | Moves down in the minibuffer                                           |
| ivy-prev-line          | C-p          | Moves up in the minibuffer                                             |
| ivy-done               | C-m          | Select an item in the minibuffer and nav to it, closing the minibuffer |
| ivy-alt-done           | C-j          | Select an item in the minibuffer and nav to it, closing the minibuffer |
| ivy-next-line-and-call | C-M-n        | Moves down in the minibuffer, and displays item in a buffer            |
| ivy-prev-line-and-call | C-M-p        | Moves up in the minibuffer, and displays item in a buffer              |

Using `counsel-git-grep` with `ivy-next-line-and-call` enables the workflow I used to approach through the `rgrep` command.
It is better because you don't have to click to manage navigation between views of the results.

Once you have left a minibuffer search, `ivy-resume` makes it really nice to keep track of where you left off in the list of matches.

* Useful Commands

Here I list some other commands I have found useful in my travels

| Command name       | Command keys   | Description                                           |
|--------------------+----------------+-------------------------------------------------------|
| beginning-of-defun | C-M-a          | Move to beginning of closest function definition      |
| end-of-defun       | C-M-e          | Move to end of closest function definition            |
| next-error         | C-x ` or M-g n | Move to next (flycheck) error                         |
| previous error     | M-g p          | Move to previous (flycheck) error                     |
| eval-last-sexp     | C-x C-e        | Evaluate last s-expression                            |
| backward-kill-word | C-DEL          | Kill a word behind the point                          |
| mark-whole-buffer  | C-x h          | Select all text in current buffer                     |
| describe-mode      | C-h m          | Show mode and keybinding information for current mode |
